[{"content":"## Welcome to RTLBook\n\nThis is an interactive coding environment where you can explore the following libraries:\n\n| Name      | Docs |\n| ----------- | ----------- |\n| React      | [docs](https://reactjs.org/)       |\n| @testing-library/react   |  [docs](https://testing-library.com/docs/react-testing-library/intro/)        |\n| @testing-library/user-event |   [docs](https://testing-library.com/docs/user-event/intro)  |\n| @testing-library/react-hooks |  [docs](https://github.com/testing-library/react-hooks-testing-library)  |\n| @testing-library/jest-dom | [docs](https://github.com/testing-library/jest-dom#custom-matchers) |\n| expect |  [docs](https://jestjs.io/docs/expect)  |\n\nIn between each 'cell' there are buttons that can add in a new code editor or a text section.","type":"text","id":"12frm"},{"content":"import {render, screen} from '@testing-library/react';\n\nfunction RoleExample(){\n  return (\n    <div>\n      <a href=\"/\">Link</a>\n      <button>Button</button>\n      <footer>Content Info</footer>\n      <h1>Heading</h1>\n      <header>Header</header>\n      <img alt=\"img\"/>\n      <input type=\"checkbox\"/>\n      <input type=\"number\"/>\n      <input type=\"radio\"/>\n      <input type=\"text\"/>\n\n      <li>List Item</li>\n      <ul>List Group</ul>\n    </div>\n  );\n}\n\n\nrender(<RoleExample />);","type":"code","id":"276ck"},{"content":"test('ccan find element by role',()=>{\n  render(<RoleExample />);\n\n  const roles = [\n    'link',\n    'button',\n    'contentinfo',\n    'heading',\n    'banner',\n    'img',\n    'checkbox',\n    'spinbutton',\n    'radio',\n    'textbox',\n    'listitem',\n    'list',\n  ];\n\n  for(let role of roles){\n    const el = screen.getByRole(role);\n    expect(el).toBeInTheDocument();\n  }\n})","type":"code","id":"7wj2n"},{"content":"function AccessibleNames(){\n  return (\n    <div>\n      <button>Submit</button>\n      <button>Cancel</button>\n    </div>\n  );\n}\n\nrender(<AccessibleNames />);","type":"code","id":"kunhd"},{"content":"test('can select by accessible name',()=>{\n  render(<AccessibleNames />);\n\n  // Use getByRole will get error since there are two buttons\n  // use name props and regex (i) to indicate case insensitive\n  const submitButton = screen.getByRole('button', {\n      name: /submit/i\n    }\n  );\n\n  const cancelButton = screen.getByRole('button',{\n    name: /cancel/i\n  });\n\n  expect(submitButton).toBeInTheDocument();\n  expect(cancelButton).toBeInTheDocument();\n});","type":"code","id":"lxg9l"},{"content":"function MoreNames(){\n  return (\n    <div>\n      <label htmlFor=\"email\">Email</label>\n      <input id=\"email\" />\n\n      <label htmlFor=\"search\">Search</label>\n      <input id=\"search\" />\n    </div>\n  );\n}\n\nrender(<MoreNames />);","type":"code","id":"w36aj"},{"content":"test('shows an email and search input', () => {\n  render(<MoreNames />);\n\n  \n  // Note that name props is identical to text inside the label\n  // Not the htmlFor\n  const emailInput = screen.getByRole('textbox', {\n    name: /email/i\n  });\n\n  const searchInput = screen.getByRole('textbox', {\n    name: /search/i\n  });\n\n  expect(emailInput).toBeInTheDocument();\n  expect(searchInput).toBeInTheDocument();\n});","type":"code","id":"3ipn3"},{"content":"function IconButtons(){\n  return (\n    <div>\n      <button aria-label=\"sign in\">\n        <svg />\n      </button>\n\n      <button aria-label=\"sign out\">\n        <svg />\n      </button>\n    </div>\n  );\n}\n\nrender(<IconButtons />)","type":"code","id":"t7n82"},{"content":"test('Bind elements base on label',()=>{\n  render(<IconButtons />);\n\n  const signInButton = screen.getByRole('button',{\n    name: /sign in/i\n  });\n\n  const signOutButton = screen.getByRole('button',{\n    name: /sign out/i\n  });\n\n  expect(signInButton).toBeInTheDocument();\n  expect(signOutButton).toBeInTheDocument();\n});","type":"code","id":"y3jdr"}]