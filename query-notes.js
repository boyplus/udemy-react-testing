[{"content":"## Welcome to RTLBook\n\nThis is an interactive coding environment where you can explore the following libraries:\n\n| Name      | Docs |\n| ----------- | ----------- |\n| React      | [docs](https://reactjs.org/)       |\n| @testing-library/react   |  [docs](https://testing-library.com/docs/react-testing-library/intro/)        |\n| @testing-library/user-event |   [docs](https://testing-library.com/docs/user-event/intro)  |\n| @testing-library/react-hooks |  [docs](https://github.com/testing-library/react-hooks-testing-library)  |\n| @testing-library/jest-dom | [docs](https://github.com/testing-library/jest-dom#custom-matchers) |\n| expect |  [docs](https://jestjs.io/docs/expect)  |\n\nIn between each 'cell' there are buttons that can add in a new code editor or a text section.","type":"text","id":"12frm"},{"content":"import {render, screen} from '@test-library/react';\n\nfunction ColorList(){\n  return (\n    <ul>\n        <li>Red</li>\n        <li>Green</li>\n        <li>Blue</li>\n    </ul>\n  );\n}\n\n\nrender(<ColorList />);","type":"code","id":"jd01u"},{"content":"test('getBy, queryBy, findBy when finding 0 elements', async () => {\n  render(<ColorList />);\n  // getBy -> try to find one element, \n  // if there is no -> throw error immediately (without expect)\n  // screen.getByRole('textbox');\n\n  // We expect to throw!\n  expect(\n    () => screen.getByRole('textbox')\n  ).toThrow();\n\n  // queryBy -> return null\n\n  expect(screen.queryByRole('textbox')).toEqual(null);\n\n  // What about promise ?\n  // findByRole -> wait for 1 second and throw an error\n\n  let errorThrows = false;\n  try{\n    await screen.findByRole('textbox');\n  } catch(error){\n    errorThrows = true;\n  }\n\n  expect(errorThrows).toBe(true);\n\n});","type":"code","id":"qr34c"},{"content":"test('getBy, queryBy, findBy when finding 0 elements', async () =>{\n  render(<ColorList />);\n\n  expect(\n    screen.getByRole('list')\n  ).toBeInTheDocument();\n\n\n  expect(\n    screen.queryByRole('list')\n  ).toBeInTheDocument();\n\n  expect(\n    await screen.findByRole('list')\n  ).toBeInTheDocument();\n\n});","type":"code","id":"5ugov"},{"content":"test('getBy, queryBy, findBy when finding > 1 elements', async () => {\n  render(<ColorList />);\n\n  // getBy -> try to find one element, \n  // if there is no -> throw error immediately (without expect)\n  // screen.getByRole('textbox');\n\n  // We expect to throw!\n  expect(\n    () => screen.getByRole('listitem')\n  ).toThrow();\n\n  expect(\n    () => screen.queryByRole('listitem')\n  ).toThrow();\n\n  // What about promise ?\n  // findByRole -> wait for 1 second and throw an error\n\n  let errorThrows = false;\n  try{\n    await screen.findByRole('listitem');\n  } catch(error){\n    errorThrows = true;\n  }\n\n  expect(errorThrows).toBe(true);\n\n});","type":"code","id":"45z14"},{"content":"test('getAllBy, queryAllBy, findAllBy', async () => {\n  render(<ColorList />);\n\n  // getAllBy -> if there is 0 el -> throw error\n  expect(\n    screen.getAllByRole('listitem')\n  ).toHaveLength(3);\n\n  // queryAllBy -> if there is 0 el -> empty array\n  expect(\n    screen.queryAllByRole('listitem')\n  ).toHaveLength(3);\n\n\n  // findAllBy -> if there is 0 el -> throw error\n  expect(\n    await screen.findAllByRole('listitem')\n  ).toHaveLength(3);\n});","type":"code","id":"4y7ci"},{"content":"test('favor using getBy to prove an element exist', () => {\n  render(<ColorList />);\n\n  // Although getBy throw an error when el does not exist\n  // OR get multiple els, we should still assert with expect\n  // since another engineer might change it to another functions\n\n  const list = screen.getByRole('list');\n\n  expect(list).toBeInTheDocument();\n});","type":"code","id":"17abp"},{"content":"test('favor using using queryBy when proving an element does not exist', () => {\n  render(<ColorList />);\n\n  const element = screen.queryByRole('textbox');\n\n  expect(element).not.toBeInTheDocument();\n});","type":"code","id":"dhumv"},{"content":"import {useState, useEffect} from 'react';\n\nfunction fakeFetchColors(){\n  return Promise.resolve(\n    ['red','green','blue']\n  );\n}\n\nfunction LoadableColorList(){\n  const [colors, setColors] = useState([]);\n\n  useEffect(()=>{\n    fakeFetchColors().then((c)=>setColors(c));\n  },[])\n\n  const renderedColors = colors.map((c)=>{\n    return <li key={c}>{c}</li>\n  });\n\n  return (\n    <ul>{renderedColors}</ul>\n  );\n}\n\nrender(<LoadableColorList />);","type":"code","id":"8ypz7"},{"content":"test('Favor findBy or findAllBy when data fetching', async () => {\n  render(<LoadableColorList />);\n\n  const els = await screen.findAllByRole('listitem');\n\n  expect(els).toHaveLength(3);\n});","type":"code","id":"6m4ic"}]